<%= form_with(model: [@timeline, event], local: true, html: { class: 'events-form' }) do |form| %>
  <% if event.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(event.errors.count, "error") %> prohibited this event from being saved:</h2>

      <ul>
      <% event.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  
  <div id="event-description" class="form-data-block">

    <div class="field">
      <%= form.label :name, t('labels.name') %>
      <%= form.text_field :name, autocomplete: "off" %>
    </div>

    <div class="field">
      <%= form.label :description, t('labels.description') %>
      <%= form.text_area :description %>
    </div>

  </div>

  <div id="event-duration" class="form-data-block">
    <%# Aggiungiamo un campo nascosto per tracciare il tipo di evento %>
    <%= hidden_field_tag :current_duration_type, event.end_date && event.start_date != event.end_date ? 'multi-day' : '1-day' %>

    <div class="field duration-type">
      <div class="duration-option">
        <%= radio_button_tag :duration_type, '1-day', event.end_date.nil? || event.start_date == event.end_date, 
            class: 'duration-radio', id: 'duration_type_single' %>
        <label for="duration_type_single"><%= t('labels.duration.one_day') %></label>
        <%= form.date_field :start_date, class: 'single-day-date date-field', placeholder: 'Choose date...', 
            data: { controller: 'datepicker' } %>
      </div>

      <div class="duration-option">
        <%= radio_button_tag :duration_type, 'multi-day', event.end_date && event.start_date != event.end_date,
            class: 'duration-radio', id: 'duration_type_multi' %>
        <label for="duration_type_multi"><%= t('labels.duration.multiple_days') %></label>
        <div class="date-range-fields">
          <div class="date-field">
            <label><%= t('labels.duration.from') %></label>
            <%= form.date_field :start_date, class: 'multi-day-start date-field', placeholder: 'Choose date...', 
                data: { controller: 'datepicker' } %>
          </div>
          <div class="date-field">
            <label><%= t('labels.duration.to') %></label>
            <%= form.date_field :end_date, class: 'multi-day-end date-field', placeholder: 'Choose date...', 
                data: { controller: 'datepicker' } %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="event-color" class="form-data-block">

    <div class="field color-picker">
      <%= form.label :color, t('labels.color') %>
      <%= form.color_field :color, value: event.color.present? ? event.color : "#00A3D7" %>
    </div>

  </div>

  <div class="actions">
    <%= form.submit event.new_record? ? t('actions.create_event') : t('actions.update_event'), class: 'button' %>
    oppure <%= link_to 'torna alla timeline', timeline_path(@timeline), class: 'back-link' %>
    <% unless event.new_record? %>
      | <%= link_to 'elimina evento', timeline_event_path(@timeline, event), 
                data: { 
                  turbo_method: :delete,
                  turbo_confirm: t('messages.confirm')
                },
                style: "color: red;" %>
    <% end %>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const singleDayDate = document.querySelector('.single-day-date');
      const multiDayStart = document.querySelector('.multi-day-start');
      const multiDayEnd = document.querySelector('.multi-day-end');
      const durationRadios = document.querySelectorAll('.duration-radio');

      // Funzione per sincronizzare le date
      function syncDates() {
        const selectedType = document.querySelector('.duration-radio:checked').value;
        
        if (selectedType === '1-day') {
          // Nascondi i campi multi-day
          document.querySelector('.date-range-fields').style.display = 'none';
          // Mostra il campo single-day
          singleDayDate.style.display = 'block';
          // Sincronizza le date
          multiDayStart.value = singleDayDate.value;
          multiDayEnd.value = singleDayDate.value;
        } else {
          // Mostra i campi multi-day
          document.querySelector('.date-range-fields').style.display = 'flex';
          // Nascondi il campo single-day
          singleDayDate.style.display = 'none';
          // Sincronizza la data di inizio
          multiDayStart.value = singleDayDate.value;
        }
      }

      // Gestisci il cambio di tipo durata
      durationRadios.forEach(radio => {
        radio.addEventListener('change', syncDates);
      });

      // Gestisci il cambio della data nel campo single-day
      singleDayDate.addEventListener('change', function() {
        if (document.querySelector('input[value="1-day"]').checked) {
          multiDayStart.value = this.value;
          multiDayEnd.value = this.value;
        }
      });

      // Gestisci il cambio della data di inizio nel multi-day
      multiDayStart.addEventListener('change', function() {
        if (document.querySelector('input[value="1-day"]').checked) {
          singleDayDate.value = this.value;
          multiDayEnd.value = this.value;
        }
      });

      // Imposta lo stato iniziale in base alle date dell'evento
      function setInitialState() {
        // Se le date sono uguali o la data di fine non Ã¨ impostata, seleziona "1-day"
        if (multiDayStart.value && (!multiDayEnd.value || multiDayStart.value === multiDayEnd.value)) {
          document.querySelector('input[value="1-day"]').checked = true;
          singleDayDate.value = multiDayStart.value;
        } else if (multiDayStart.value && multiDayEnd.value) {
          // Se le date sono diverse, seleziona "multi-day"
          document.querySelector('input[value="multi-day"]').checked = true;
        }
        // Sincronizza la visualizzazione
        syncDates();
      }

      // Inizializza lo stato
      setInitialState();
    });
  </script>
<% end %>
