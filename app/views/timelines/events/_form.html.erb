<%= form_with(model: [@timeline, event], local: true, html: { class: 'events-form' }) do |form| %>
  <% if event.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(event.errors.count, "error") %> prohibited this event from being saved:</h2>

      <ul>
      <% event.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  
  <div id="event-description" class="form-data-block">

    <div class="field">
      <%= form.label :name, t('labels.name') %>
      <%= form.text_field :name, autocomplete: "off" %>
    </div>

    <div class="field">
      <%= form.label :description, t('labels.description') %>
      <%= form.text_area :description %>
    </div>

  </div>

  <div id="event-duration" class="form-data-block">
    <%# Campo nascosto per mantenere retrocompatibilità %>
    <%= hidden_field_tag :current_duration_type, event.event_duration %>

    <div class="field duration-type">
      <div class="duration-option">
        <%= radio_button_tag :duration_type, '1-day', event.event_duration == '1-day' || event.new_record?, 
            class: 'duration-radio', id: 'duration_type_single' %>
        <label for="duration_type_single"><%= t('labels.duration.one_day') %></label>
        <div class="single-day-container-option date-container">
          <%# I campi data verranno spostati qui tramite JavaScript se viene selezionato "Un giorno" %>
        </div>
      </div>

      <div class="duration-option">
        <%= radio_button_tag :duration_type, 'multi-day', event.event_duration == 'multi-day',
            class: 'duration-radio', id: 'duration_type_multi' %>
        <label for="duration_type_multi"><%= t('labels.duration.multiple_days') %></label>
        <div class="multi-day-container-option date-container">
          <%# I campi data verranno spostati qui tramite JavaScript se viene selezionato "Dura più giorni" %>
        </div>
      </div>

      <%# Contenitore dei campi data - lo posizioniamo direttamente nel contenitore appropriato %>
      <div id="date-fields-container" class="date-range-fields" style="display: flex;">
        <div class="date-field">
          <label><%= t('labels.duration.from') %></label>
          <%= form.date_field :start_date, class: 'multi-day-start date-field', placeholder: 'Choose date...' %>
        </div>
        <div class="date-field">
          <label><%= t('labels.duration.to') %></label>
          <%= form.date_field :end_date, class: 'multi-day-end date-field', placeholder: 'Choose date...' %>
        </div>
      </div>
    </div>
  </div>

  <div id="event-color" class="form-data-block">

    <div class="field color-picker">
      <%= form.label :color, t('labels.color') %>
      <%= form.color_field :color, value: event.color.present? ? event.color : "#00A3D7" %>
    </div>

  </div>

  <div class="actions">
    <%= form.submit event.new_record? ? t('actions.create_event') : t('actions.update_event'), class: 'button' %>
    oppure <%= link_to 'torna alla timeline', timeline_path(@timeline), class: 'back-link' %>
    <% unless event.new_record? %>
      | <%= link_to 'elimina evento', timeline_event_path(@timeline, event), 
                data: { 
                  turbo_method: :delete, 
                  turbo_confirm: t('messages.confirm')
                },
                style: "color: red;" %>
    <% end %>
  </div>

  <script>
    // Funzione per spostare i campi data nel contenitore appropriato
    function moveDateFields(targetContainerSelector) {
      const dateFieldsContainer = document.getElementById('date-fields-container');
      const targetContainer = document.querySelector(targetContainerSelector);
      
      if (dateFieldsContainer && targetContainer) {
        targetContainer.appendChild(dateFieldsContainer);
      }
    }

    // Aggiunge i listener per i radio button
    document.addEventListener('DOMContentLoaded', function() {
      const singleDayRadio = document.getElementById('duration_type_single');
      const multiDayRadio = document.getElementById('duration_type_multi');
      
      if (!singleDayRadio || !multiDayRadio) return;
      
      // Sposta i campi data in base alla selezione iniziale del radio button
      if (singleDayRadio.checked) {
        moveDateFields('.single-day-container-option');
      } else if (multiDayRadio.checked) {
        moveDateFields('.multi-day-container-option');
      }
      
      // Aggiungi listener per lo spostamento quando cambia la selezione
      singleDayRadio.addEventListener('change', function() {
        if (this.checked) {
          moveDateFields('.single-day-container-option');
        }
      });
      
      multiDayRadio.addEventListener('change', function() {
        if (this.checked) {
          moveDateFields('.multi-day-container-option');
        }
      });
    });
    
    // Poiché DOMContentLoaded potrebbe non attivarsi con Turbo, eseguiamo anche codice immediato
    (function() {
      const singleDayRadio = document.getElementById('duration_type_single');
      const multiDayRadio = document.getElementById('duration_type_multi');
      
      if (singleDayRadio && singleDayRadio.checked) {
        moveDateFields('.single-day-container-option');
      } else if (multiDayRadio && multiDayRadio.checked) {
        moveDateFields('.multi-day-container-option');
      }
      
      // Aggiungiamo gestione manuale della conferma per il link di eliminazione
      const deleteLink = document.querySelector('a[data-turbo-method="delete"]');
      if (deleteLink) {
        deleteLink.addEventListener('click', function(event) {
          if (!confirm(deleteLink.getAttribute('data-turbo-confirm') || 'Sei sicuro?')) {
            event.preventDefault();
            event.stopPropagation();
          }
        });
      }
    })();
  </script>
<% end %>
