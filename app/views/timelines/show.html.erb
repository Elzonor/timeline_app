<p id="notice"><%= notice %></p>

<h1><%= @timeline.name %></h1>

<% if @timeline.duration_details %>
  <% details = @timeline.duration_details %>
  <p class="timeline-duration">
    <%= t('timeline.span_text_with_days',
         count: @timeline.events.count,
         days: pluralize(details[:days], t('duration.days.one'), t('duration.days.other')),
         weeks: pluralize(details[:weeks], t('duration.weeks.one'), t('duration.weeks.other')),
         months: pluralize(details[:months], t('duration.months.one'), t('duration.months.other')),
         years: pluralize(details[:years], t('duration.years.one'), t('duration.years.other'))) %>
  </p>
<% end %>

<div class="actions">
  <%= link_to timelines_path, class: 'icon-link' do %>
    <i class="fas fa-arrow-left"></i> <%= t('actions.back_to_timelines') %>
  <% end %> | 
  <%= link_to t('actions.edit_timeline'), edit_timeline_path(@timeline) %> |
  <%= link_to t('actions.add_event'), new_timeline_event_path(@timeline) %>
</div>

<% if @timeline.events.any? %>
  <div class="view-switch-container">
    <div class="view-switch">
      <span><%= t('timeline.view_by') %>:</span>
      <%= link_to t('timeline.view_types.days'), timeline_path(@timeline, view_type: 'days'), class: "view-option #{@view_type == 'days' ? 'active' : ''}" %>
      <%= link_to t('timeline.view_types.weeks'), timeline_path(@timeline, view_type: 'weeks'), class: "view-option #{@view_type == 'weeks' ? 'active' : ''}" %>
      <%= link_to t('timeline.view_types.months'), timeline_path(@timeline, view_type: 'months'), class: "view-option #{@view_type == 'months' ? 'active' : ''}" %>
      <%= link_to t('timeline.view_types.years'), timeline_path(@timeline, view_type: 'years'), class: "view-option #{@view_type == 'years' ? 'active' : ''}" %>
    </div>
  </div>
<% end %>

<div class="events hidden">
  <% if @timeline.events.any? %>
    <div class="grid">
      <div class="header">
        <div>#</div>
        <div><%= t('labels.name') %></div>
        <div><%= t('labels.start_date') %></div>
        <div><%= t('labels.end_date') %></div>
        <div><%= t('labels.description') %></div>
        <div></div>
        <div></div>
      </div>

      <% @ordered_events.each do |event| %>
        <div class="row">
          <div><%= @events_by_creation[event.id] %></div>
          <div><%= link_to event.name, timeline_event_path(@timeline, event), style: "color: #{event.color};" %></div>
          <div><%= l(event.start_date, format: :short) if event.start_date %></div>
          <div>
            <%= event.end_date ? l(event.end_date, format: :short) : t('labels.ongoing') %>
            <% if event.duration_details %>
              <% details = event.duration_details %>
              (<%= details[:days] %> <%= t('duration.days', count: details[:days]) %>,
               <%= t('duration.span_text',
                     weeks: pluralize(details[:weeks], t('duration.weeks.one'), t('duration.weeks.other')),
                     months: pluralize(details[:months], t('duration.months.one'), t('duration.months.other'))) %>)
            <% end %>
          </div>
          <div><%= event.description %></div>
          <div><%= link_to edit_timeline_event_path(@timeline, event), class: 'icon-link icon-edit' do %>
            <i class="fas fa-edit"></i>
          <% end %></div>
          <div><%= link_to timeline_event_path(@timeline, event), 
                  data: { 
                    turbo_method: :delete,
                    turbo_confirm: t('messages.confirm')
                  },
                  class: 'icon-link icon-delete' do %>
            <i class="fas fa-trash"></i>
          <% end %></div>
        </div>
      <% end %>
    </div>
  <% else %>
    <p><%= t('messages.no_events') %></p>
  <% end %>
</div>

<% if @timeline.events.any? %>
  <div class="visual-timeline view-type-<%= @view_type %>">
    <% if @timeline.duration_details && @time_units.any? %>
      <% 
        # Creo un hash per mappare gli eventi ai loro gruppi
        event_to_group = {}
        
        # Per ogni gruppo di eventi
        @event_groups.each_with_index do |group, group_index|
          # Assegna l'indice del gruppo a ciascun evento nel gruppo
          group.each do |event|
            event_to_group[event.id] = group_index
          end
        end
        
        # Creo un hash per mappare gli eventi al loro indice all'interno del gruppo
        event_to_index_in_group = {}
        
        # Per ogni gruppo di eventi
        @event_groups.each do |group|
          # Ordina gli eventi nel gruppo per data di inizio
          sorted_events = group.sort_by(&:start_date)
          
          # Assegna un indice progressivo a ciascun evento nel gruppo
          sorted_events.each_with_index do |event, index_in_group|
            event_to_index_in_group[event.id] = index_in_group
          end
        end

        # Teniamo traccia dell'ultimo anno visualizzato
        last_year_shown = nil
        
        # Creiamo un array per tenere traccia di tutte le unità di tempo che verranno mostrate
        visible_time_units = []
        
        # Identifichiamo tutte le unità di tempo che contengono eventi o sono gap
        @time_units.each do |time_unit|
          is_gap_unit = @gap_units.include?(time_unit)
          
          # Verifica se l'unità di tempo contiene eventi
          time_unit_has_events = false
          @ordered_events.each do |event|
            event_end = event.end_date || Date.current
            
            # Verifica se l'evento cade nell'unità di tempo corrente
            case @view_type
            when 'days'
              if (event.start_date..event_end).cover?(time_unit)
                time_unit_has_events = true
                break
              end
            when 'weeks'
              if (event.start_date.beginning_of_week..event_end.end_of_week).cover?(time_unit)
                time_unit_has_events = true
                break
              end
            when 'months'
              if (event.start_date.beginning_of_month..event_end.end_of_month).cover?(time_unit)
                time_unit_has_events = true
                break
              end
            when 'years'
              if (event.start_date.beginning_of_year..event_end.end_of_year).cover?(time_unit)
                time_unit_has_events = true
                break
              end
            end
          end
          
          # Mostra l'unità di tempo solo se contiene eventi o è un'unità di gap
          should_show_time_unit = time_unit_has_events || is_gap_unit
          
          # Aggiungi l'unità di tempo all'array se deve essere mostrata
          visible_time_units << time_unit if should_show_time_unit
        end
        
        # Prepariamo un hash per tenere traccia del primo elemento non-gap per ogni anno
        first_non_gap_of_year = {}
        
        # Prepariamo un hash per tenere traccia del primo elemento non-gap per ogni mese
        first_non_gap_of_month = {}
        
        # Identifichiamo il primo elemento non-gap per ogni anno e mese
        visible_time_units.each do |time_unit|
          is_gap_unit = @gap_units.include?(time_unit)
          
          # Salta le unità gap
          next if is_gap_unit
          
          # Determina l'anno corrente in base al tipo di visualizzazione
          current_year = case @view_type
          when 'days'
            time_unit.year
          when 'weeks'
            time_unit.end_of_week.year
          when 'months'
            time_unit.end_of_month.year
          when 'years'
            time_unit.end_of_year.year
          end
          
          # Determina il mese corrente in base al tipo di visualizzazione
          current_month = case @view_type
          when 'days'
            time_unit.month
          when 'weeks'
            time_unit.end_of_week.month
          when 'months'
            time_unit.end_of_month.month
          when 'years'
            time_unit.end_of_year.month
          end
          
          # Creiamo una chiave combinata anno-mese per identificare univocamente ogni mese
          year_month_key = "#{current_year}-#{current_month}"
          
          # Se non abbiamo ancora trovato un elemento non-gap per questo anno, lo memorizziamo
          first_non_gap_of_year[current_year] ||= time_unit
          
          # Se non abbiamo ancora trovato un elemento non-gap per questo mese, lo memorizziamo
          first_non_gap_of_month[year_month_key] ||= time_unit
        end
        
        # Teniamo traccia dell'ultimo anno e mese visualizzati
        last_year_shown = nil
        last_month_shown = nil
        
        # Ora iteriamo sulle unità di tempo visibili
        visible_time_units.each_with_index do |time_unit, index|
          is_gap_unit = @gap_units.include?(time_unit)
          
          # Determina l'anno corrente in base al tipo di visualizzazione
          current_year = case @view_type
          when 'days'
            time_unit.year
          when 'weeks'
            time_unit.end_of_week.year
          when 'months'
            time_unit.end_of_month.year
          when 'years'
            time_unit.end_of_year.year
          end
          
          # Determina il mese corrente in base al tipo di visualizzazione
          current_month = case @view_type
          when 'days'
            time_unit.month
          when 'weeks'
            time_unit.end_of_week.month
          when 'months'
            time_unit.end_of_month.month
          when 'years'
            time_unit.end_of_year.month
          end
          
          # Creiamo una chiave combinata anno-mese per identificare univocamente ogni mese
          year_month_key = "#{current_year}-#{current_month}"
          
          # Verifica se questa unità di tempo è la prima non-gap del suo anno
          is_first_non_gap_of_year = !is_gap_unit && first_non_gap_of_year[current_year] == time_unit
          
          # Verifica se questa unità di tempo è la prima non-gap del suo mese
          is_first_non_gap_of_month = !is_gap_unit && first_non_gap_of_month[year_month_key] == time_unit
          
          # Verifica se è il primo elemento dell'anno
          is_first_of_year = last_year_shown != current_year
          
          # Verifica se è il primo elemento del mese
          is_first_of_month = last_month_shown != current_month || is_first_of_year
          
          # Aggiorna l'ultimo anno e mese mostrati
          last_year_shown = current_year if is_first_of_year
          last_month_shown = current_month if is_first_of_month
      %>
        
        <div class="time-unit-year <%= is_gap_unit ? 'time-unit-gap' : '' %>">
          <% if is_first_non_gap_of_year %>
            <div><%= current_year %></div>
          <% end %>
        </div>
        
        <div class="time-unit-month <%= is_gap_unit ? 'time-unit-gap' : '' %>">
          <% if is_first_non_gap_of_month && !is_gap_unit %>
            <div><%= l(Date.new(current_year, current_month, 1), format: :month_no_year) %></div>
          <% end %>
        </div>
        
        <% if is_gap_unit %>
          <div class="time-unit-date time-unit-gap">
            <div class="time-unit-date-text">
              <% case @view_type %>
              <% when 'days' %>
                <%= l(time_unit, format: :day_only) %>
              <% when 'weeks' %>
                <%= l(time_unit.end_of_week, format: :day_only) %>
              <% when 'months' %>
                <%= l(time_unit.end_of_month, format: :day_only) %>
              <% when 'years' %>
                <%= l(time_unit.end_of_year, format: :day_only) %>
              <% end %>
            </div>
            <div class="time-unit-line"></div>
            <div class="end-of-time-unit-line"></div>
          </div>
          <div class="time-unit-lines time-unit-gap"></div>
          <div class="time-unit-events time-unit-gap"></div>
        <% else %>
          <div class="time-unit-date">
            <div class="time-unit-date-text">
              <% case @view_type %>
              <% when 'days' %>
                <%= l(time_unit, format: :day_only) %>
              <% when 'weeks' %>
                <%= l(time_unit.end_of_week, format: :day_only) %>
              <% when 'months' %>
                <%= l(time_unit.end_of_month, format: :day_only) %>
              <% when 'years' %>
                <%= l(time_unit.end_of_year, format: :day_only) %>
              <% end %>
            </div>
            <div class="time-unit-line"></div>
            <div class="end-of-time-unit-line"></div>
          </div>
          <div class="time-unit-lines">
            <% @ordered_events.each_with_index do |event, index| %>
              <% event_end = event.end_date || Date.current %>
              <% 
                # Verifica se l'evento cade nell'unità di tempo corrente
                event_in_time_unit = false
                case @view_type
                when 'days'
                  event_in_time_unit = (event.start_date..event_end).cover?(time_unit)
                when 'weeks'
                  event_in_time_unit = (event.start_date.beginning_of_week..event_end.end_of_week).cover?(time_unit)
                when 'months'
                  event_in_time_unit = (event.start_date.beginning_of_month..event_end.end_of_month).cover?(time_unit)
                when 'years'
                  event_in_time_unit = (event.start_date.beginning_of_year..event_end.end_of_year).cover?(time_unit)
                end
              %>
              
              <% if event_in_time_unit %>
                <% 
                  # Ottieni l'indice del gruppo dell'evento
                  group_id = event_to_group[event.id]
                  
                  # Ottieni l'indice fisso dell'evento all'interno del suo gruppo
                  relative_index = event_to_index_in_group[event.id]
                  
                  # Calcola la posizione left della linea dell'evento
                  # Se è il primo evento del gruppo (relative_index = 0), deve essere attaccato alla linea verticale (left = 0)
                  # Altrimenti, si sposta verso destra in base all'indice relativo
                  left_position = relative_index == 0 ? 0 : relative_index * 5
                  
                  # Verifica se l'evento dura solo 1 giorno
                  is_single_day_event = event.end_date && event.start_date && (event.end_date.to_date - event.start_date.to_date).to_i == 0
                %>
                
                <% unless is_single_day_event %>
                  <div class="event-line" 
                       style="background-color: <%= event.color %>; 
                              left: <%= left_position %>px;"></div>
                <% end %>
                
                <% 
                  # Verifica se l'evento termina nell'unità di tempo corrente
                  event_ends_in_time_unit = false
                  case @view_type
                  when 'days'
                    event_ends_in_time_unit = time_unit == event_end
                  when 'weeks'
                    event_ends_in_time_unit = time_unit == event_end.beginning_of_week
                  when 'months'
                    event_ends_in_time_unit = time_unit == event_end.beginning_of_month
                  when 'years'
                    event_ends_in_time_unit = time_unit == event_end.beginning_of_year
                  end
                %>
                
                <% if event_ends_in_time_unit %>
                  <div class="event-title-line" 
                       style="background-color: <%= event.color %>; 
                              left: <%= is_single_day_event ? 0 : left_position + 5 %>px;
                              width: calc(100% - <%= is_single_day_event ? 0 : left_position + 5 %>px);"></div>
                <% end %>
              <% end %>
            <% end %>
          </div>
          <div class="time-unit-events">
            <% @ordered_events.each_with_index do |event, index| %>
              <% event_end = event.end_date || Date.current %>
              <% 
                # Verifica se l'evento termina nell'unità di tempo corrente
                event_ends_in_time_unit = false
                case @view_type
                when 'days'
                  event_ends_in_time_unit = time_unit == event_end
                when 'weeks'
                  event_ends_in_time_unit = time_unit == event_end.beginning_of_week
                when 'months'
                  event_ends_in_time_unit = time_unit == event_end.beginning_of_month
                when 'years'
                  event_ends_in_time_unit = time_unit == event_end.beginning_of_year
                end
              %>
              
              <% if event_ends_in_time_unit %>
                <div class="event-title">
                  <%= link_to edit_timeline_event_path(@timeline, event), 
                              style: "color: #{event.color};",
                              class: "event-title-link" do %>
                    <%= event.name %>
                  <% end %>
                </div>
              <% end %>
            <% end %>
          </div>
        <% end %>
      <% end %>
    <% end %>
  </div>
<% else %>
  <p><%= t('messages.no_events') %></p>
<% end %>
