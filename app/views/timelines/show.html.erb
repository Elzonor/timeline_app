<div class="container-fluid mt-4">
  <div class="row">
    <div class="col-12">
      <% if notice %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= notice %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% end %>
    </div>
  </div>

  <div class="row">
    <div class="col-12">
      <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-top mb-4">
        <div>
          <h1 class="mb-13 mb-sm-0"><%= @timeline.name %></h1>
          <% if @timeline.duration_details %>
            <% details = @timeline.duration_details %>
            <p class="timeline-duration mb-21">
              <%= t('timeline.span_text_with_days',
                   count: @timeline.events.count,
                   count_formatted: number_with_delimiter(@timeline.events.count, delimiter: '.'),
                   days: pluralize(number_with_delimiter(details[:days], delimiter: '.'), t('duration.days.one'), t('duration.days.other')),
                   weeks: pluralize(number_with_delimiter(details[:weeks], delimiter: '.'), t('duration.weeks.one'), t('duration.weeks.other')),
                   months: pluralize(number_with_delimiter(details[:months], delimiter: '.'), t('duration.months.one'), t('duration.months.other')),
                   years: pluralize(number_with_delimiter(details[:years], delimiter: '.'), t('duration.years.one'), t('duration.years.other')),
                   total_years: pluralize(number_with_delimiter(details[:total_years], delimiter: '.'), t('duration.years.one'), t('duration.years.other'))) %>
            </p>
          <% end %>
        </div>

        <div class="actions">
          <%= link_to new_timeline_event_path(@timeline), class: 'btn btn-primary text-white' do %>
            <i class="fas fa-plus"></i> <%= t('actions.add_event') %>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <% if @timeline.events.any? %>
    <div class="row mb-4">
      <div class="col-12">
        <div class="view-switch-container">
          <div class="view-switch">
            <span><%= t('timeline.view_by') %>:</span>
            <%= link_to t('timeline.view_types.days'), timeline_path(@timeline, view_type: 'days'), class: "view-option #{@view_type == 'days' ? 'active' : ''}" %>
            <%= link_to t('timeline.view_types.weeks'), timeline_path(@timeline, view_type: 'weeks'), class: "view-option #{@view_type == 'weeks' ? 'active' : ''}" %>
            <%= link_to t('timeline.view_types.months'), timeline_path(@timeline, view_type: 'months'), class: "view-option #{@view_type == 'months' ? 'active' : ''}" %>
            <%= link_to t('timeline.view_types.years'), timeline_path(@timeline, view_type: 'years'), class: "view-option #{@view_type == 'years' ? 'active' : ''}" %>
          </div>
        </div>
      </div>
    </div>
  <% end %>

  <% if @timeline.events.any? %>
    <div class="row">
      <div class="col-12">
        <div class="visual-timeline view-type-<%= @view_type %>">
          <% if @timeline.duration_details && @time_units.any? %>
            <% 
              # Creo un hash per mappare gli eventi ai loro gruppi in base al tipo di visualizzazione
              event_to_group_by_view_type = {
                'days' => {},
                'weeks' => {},
                'months' => {},
                'years' => {}
              }
              
              # Per ogni tipo di visualizzazione, creiamo gruppi di eventi che si sovrappongono
              ['days', 'weeks', 'months', 'years'].each do |view_type|
                # Ordina gli eventi per data di inizio
                sorted_events = @timeline.events.sort_by(&:start_date)
                
                # Separa gli eventi in 1-day e multi-day
                single_day_events, multi_day_events = sorted_events.partition { |event| event.event_duration == '1-day' }
                
                # Inizializza i gruppi solo per gli eventi multi-day
                groups = []
                current_group = []
                
                multi_day_events.each do |event|
                  if current_group.empty?
                    # Se non ci sono eventi nel gruppo corrente, inizia un nuovo gruppo
                    current_group << event
                  else
                    # Trova la data di fine più recente nel gruppo corrente
                    latest_end_date = current_group.map { |e| e.end_date || Date.current }.max
                    
                    # Determina se l'evento si sovrappone al gruppo corrente in base al tipo di visualizzazione
                    overlaps = false
                    case view_type
                    when 'days'
                      overlaps = event.start_date <= latest_end_date
                    when 'weeks'
                      overlaps = event.start_date.beginning_of_week <= latest_end_date.end_of_week
                    when 'months'
                      # Verifica se gli eventi condividono almeno un mese
                      event_end = (event.end_date || Date.current).to_date
                      event_months = (event.start_date.to_date.beginning_of_month..event_end.end_of_month).map { |d| d.beginning_of_month }.uniq
                      current_group_months = current_group.flat_map do |e|
                        e_end = (e.end_date || Date.current).to_date
                        (e.start_date.to_date.beginning_of_month..e_end.end_of_month).map { |d| d.beginning_of_month }.uniq
                      end
                      overlaps = (event_months & current_group_months).any?
                    when 'years'
                      overlaps = event.start_date.beginning_of_year <= latest_end_date.end_of_year
                    end
                    
                    if overlaps
                      current_group << event
                    else
                      # Altrimenti, chiudi il gruppo corrente e iniziane uno nuovo
                      groups << current_group
                      current_group = [event]
                    end
                  end
                end
                
                # Aggiungi l'ultimo gruppo se non è vuoto
                groups << current_group unless current_group.empty?
                
                # Assegna l'indice del gruppo a ciascun evento nel gruppo
                groups.each_with_index do |group, group_index|
                  group.each do |event|
                    event_to_group_by_view_type[view_type][event.id] = group_index
                  end
                end
                
                # Assegna un gruppo separato per ogni evento 1-day
                single_day_events.each_with_index do |event, index|
                  event_to_group_by_view_type[view_type][event.id] = groups.size + index
                end
              end
              
              # Creo un hash per mappare gli eventi al loro indice all'interno del gruppo in base al tipo di visualizzazione
              event_to_index_in_group_by_view_type = {
                'days' => {},
                'weeks' => {},
                'months' => {},
                'years' => {}
              }
              
              # Per ogni tipo di visualizzazione e per ogni gruppo di eventi
              ['days', 'weeks', 'months', 'years'].each do |view_type|
                # Raggruppa gli eventi per gruppo
                events_by_group = {}
                @timeline.events.each do |event|
                  group_id = event_to_group_by_view_type[view_type][event.id]
                  events_by_group[group_id] ||= []
                  events_by_group[group_id] << event
                end
                
                # Per ogni gruppo, ordina gli eventi e assegna un indice
                events_by_group.each do |group_id, events|
                  # Ordina gli eventi nel gruppo per data di inizio
                  sorted_events = events.sort_by(&:start_date)
                  
                  # Per ogni evento nel gruppo, trova gli eventi che condividono la stessa time-unit
                  sorted_events.each do |event|
                    event_end = (event.end_date || Date.current).to_date
                    overlapping_events = sorted_events.select do |other_event|
                      next if other_event == event
                      other_end = (other_event.end_date || Date.current).to_date
                      
                      # Verifica se gli eventi condividono almeno una time-unit
                      case view_type
                      when 'days'
                        (event.start_date.to_date..event_end).overlaps?(other_event.start_date.to_date..other_end)
                      when 'weeks'
                        (event.start_date.to_date.beginning_of_week..event_end.end_of_week)
                          .overlaps?(other_event.start_date.to_date.beginning_of_week..other_end.end_of_week)
                      when 'months'
                        event_months = (event.start_date.to_date.beginning_of_month..event_end.end_of_month)
                          .map { |d| d.beginning_of_month }.uniq
                        other_months = (other_event.start_date.to_date.beginning_of_month..other_end.end_of_month)
                          .map { |d| d.beginning_of_month }.uniq
                        (event_months & other_months).any?
                      when 'years'
                        (event.start_date.to_date.beginning_of_year..event_end.end_of_year)
                          .overlaps?(other_event.start_date.to_date.beginning_of_year..other_end.end_of_year)
                      end
                    end
                    
                    # Trova il primo indice disponibile che non è usato da eventi sovrapposti
                    used_indices = overlapping_events.map { |e| event_to_index_in_group_by_view_type[view_type][e.id] }.compact
                    available_index = (0..used_indices.size).find { |i| !used_indices.include?(i) }
                    
                    event_to_index_in_group_by_view_type[view_type][event.id] = available_index
                  end
                end
              end
              
              # Teniamo traccia dell'ultimo anno visualizzato
              last_year_shown = nil
              
              # Creiamo un array per tenere traccia di tutte le unità di tempo che verranno mostrate
              visible_time_units = []
              
              # Identifichiamo tutte le unità di tempo che contengono eventi o sono gap
              @time_units.each do |time_unit|
                is_gap_unit = @gap_units.include?(time_unit)
                
                # Verifica se l'unità di tempo contiene eventi
                time_unit_has_events = false
                @ordered_events.each do |event|
                  event_end = event.end_date || Date.current
                  
                  # Verifica se l'evento cade nell'unità di tempo corrente
                  case @view_type
                  when 'days'
                    if (event.start_date..event_end).cover?(time_unit)
                      time_unit_has_events = true
                      break
                    end
                  when 'weeks'
                    if (event.start_date.beginning_of_week..event_end.end_of_week).cover?(time_unit)
                      time_unit_has_events = true
                      break
                    end
                  when 'months'
                    if (event.start_date.beginning_of_month..event_end.end_of_month).cover?(time_unit)
                      time_unit_has_events = true
                      break
                    end
                  when 'years'
                    if (event.start_date.beginning_of_year..event_end.end_of_year).cover?(time_unit)
                      time_unit_has_events = true
                      break
                    end
                  end
                end
                
                # Mostra l'unità di tempo solo se contiene eventi o è un'unità di gap
                should_show_time_unit = time_unit_has_events || is_gap_unit
                
                # Aggiungi l'unità di tempo all'array se deve essere mostrata
                visible_time_units << time_unit if should_show_time_unit
              end
              
              # Prepariamo un hash per tenere traccia del primo elemento non-gap per ogni anno
              first_non_gap_of_year = {}
              
              # Prepariamo un hash per tenere traccia del primo elemento non-gap per ogni mese
              first_non_gap_of_month = {}
              
              # Identifichiamo il primo elemento non-gap per ogni anno e mese
              visible_time_units.each do |time_unit|
                is_gap_unit = @gap_units.include?(time_unit)
                
                # Salta le unità gap
                next if is_gap_unit
                
                # Determina l'anno corrente in base al tipo di visualizzazione
                current_year = case @view_type
                when 'days'
                  time_unit.year
                when 'weeks'
                  time_unit.end_of_week.year
                when 'months'
                  time_unit.end_of_month.year
                when 'years'
                  time_unit.end_of_year.year
                end
                
                # Determina il mese corrente in base al tipo di visualizzazione
                current_month = case @view_type
                when 'days'
                  time_unit.month
                when 'weeks'
                  time_unit.end_of_week.month
                when 'months'
                  time_unit.end_of_month.month
                when 'years'
                  time_unit.end_of_year.month
                end
                
                # Creiamo una chiave combinata anno-mese per identificare univocamente ogni mese
                year_month_key = "#{current_year}-#{current_month}"
                
                # Se non abbiamo ancora trovato un elemento non-gap per questo anno, lo memorizziamo
                first_non_gap_of_year[current_year] ||= time_unit
                
                # Se non abbiamo ancora trovato un elemento non-gap per questo mese, lo memorizziamo
                first_non_gap_of_month[year_month_key] ||= time_unit
              end
              
              # Teniamo traccia dell'ultimo anno e mese visualizzati
              last_year_shown = nil
              last_month_shown = nil
              
              # Ora iteriamo sulle unità di tempo visibili
              visible_time_units.each_with_index do |time_unit, index|
                is_gap_unit = @gap_units.include?(time_unit)
                
                # Determina l'anno corrente in base al tipo di visualizzazione
                current_year = case @view_type
                when 'days'
                  time_unit.year
                when 'weeks'
                  time_unit.end_of_week.year
                when 'months'
                  time_unit.end_of_month.year
                when 'years'
                  time_unit.end_of_year.year
                end
                
                # Determina il mese corrente in base al tipo di visualizzazione
                current_month = case @view_type
                when 'days'
                  time_unit.month
                when 'weeks'
                  time_unit.end_of_week.month
                when 'months'
                  time_unit.end_of_month.month
                when 'years'
                  time_unit.end_of_year.month
                end
                
                # Creiamo una chiave combinata anno-mese per identificare univocamente ogni mese
                year_month_key = "#{current_year}-#{current_month}"
                
                # Verifica se questa unità di tempo è la prima non-gap del suo anno
                is_first_non_gap_of_year = !is_gap_unit && first_non_gap_of_year[current_year] == time_unit
                
                # Verifica se questa unità di tempo è la prima non-gap del suo mese
                is_first_non_gap_of_month = !is_gap_unit && first_non_gap_of_month[year_month_key] == time_unit
                
                # Verifica se è il primo elemento dell'anno
                is_first_of_year = last_year_shown != current_year
                
                # Verifica se è il primo elemento del mese
                is_first_of_month = last_month_shown != current_month || is_first_of_year
                
                # Aggiorna l'ultimo anno e mese mostrati
                last_year_shown = current_year if is_first_of_year
                last_month_shown = current_month if is_first_of_month
              %>
              
              <div class="time-unit-year <%= is_gap_unit ? 'time-unit-gap' : '' %>">
                <% if is_first_non_gap_of_year %>
                  <div><%= current_year %></div>
                <% end %>
              </div>
              
              <div class="time-unit-month <%= is_gap_unit ? 'time-unit-gap' : '' %>">
                <% if is_first_non_gap_of_month && !is_gap_unit %>
                  <div><%= l(Date.new(current_year, current_month, 1), format: :month_no_year) %></div>
                <% end %>
              </div>
              
              <% if is_gap_unit %>
                <div class="time-unit-date time-unit-gap">
                  <div class="time-unit-date-text">
                    <% case @view_type %>
                    <% when 'days' %>
                      <%= l(time_unit, format: :day_only) %>
                    <% when 'weeks' %>
                      <%= l(time_unit.end_of_week, format: :day_only) %>
                    <% when 'months' %>
                      <%= l(time_unit.end_of_month, format: :day_only) %>
                    <% when 'years' %>
                      <%= l(time_unit.end_of_year, format: :day_only) %>
                    <% end %>
                  </div>
                  <% is_future = time_unit > Date.current %>
                  <div class="time-unit-line <%= is_future ? 'future' : '' %>"></div>
                  <div class="end-of-time-unit-line <%= is_future ? 'future' : '' %>"></div>
                </div>
                <div class="time-unit-lines time-unit-gap"></div>
                <div class="time-unit-events time-unit-gap"></div>
              <% else %>
                <div class="time-unit-date">
                  <div class="time-unit-date-text">
                    <% case @view_type %>
                    <% when 'days' %>
                      <%= l(time_unit, format: :day_only) %>
                    <% when 'weeks' %>
                      <%= l(time_unit.end_of_week, format: :day_only) %>
                    <% when 'months' %>
                      <%= l(time_unit.end_of_month, format: :day_only) %>
                    <% when 'years' %>
                      <%= l(time_unit.end_of_year, format: :day_only) %>
                    <% end %>
                  </div>
                  <% is_future = time_unit > Date.current %>
                  <div class="time-unit-line <%= is_future ? 'future' : '' %>"></div>
                  <div class="end-of-time-unit-line <%= is_future ? 'future' : '' %>"></div>
                </div>
                <div class="time-unit-lines">
                  <% @ordered_events.each_with_index do |event, index| %>
                    <% event_end = event.end_date || Date.current %>
                    <% 
                      # Verifica se l'evento cade nell'unità di tempo corrente
                      event_in_time_unit = false
                      case @view_type
                      when 'days'
                        event_in_time_unit = (event.start_date..event_end).cover?(time_unit)
                      when 'weeks'
                        event_in_time_unit = (event.start_date.beginning_of_week..event_end.end_of_week).cover?(time_unit)
                      when 'months'
                        event_in_time_unit = (event.start_date.beginning_of_month..event_end.end_of_month).cover?(time_unit)
                      when 'years'
                        event_in_time_unit = (event.start_date.beginning_of_year..event_end.end_of_year).cover?(time_unit)
                      end
                    %>
                    
                    <% if event_in_time_unit %>
                      <% 
                        # Ottieni l'indice del gruppo dell'evento
                        group_id = event_to_group_by_view_type[@view_type][event.id]
                        
                        # Verifica se l'evento dura solo 1 giorno
                        is_single_day_event = event.event_duration == '1-day'
                        
                        # Ottieni l'indice fisso dell'evento all'interno del suo gruppo
                        # Per gli eventi 1-day, usa sempre indice 0
                        relative_index = is_single_day_event ? 0 : event_to_index_in_group_by_view_type[@view_type][event.id]
                        
                        # Calcola la posizione left della linea dell'evento
                        # Per gli eventi 1-day non calcoliamo left_position perché non hanno linea
                        unless is_single_day_event
                          left_position = relative_index == 0 ? 0 : relative_index * 7
                        end

                        # Calcola lo z-index basato sulla posizione nell'array ordinato
                        # Usiamo il numero totale di eventi meno l'indice per dare z-index più alti agli eventi più recenti
                        z_index = @ordered_events.length - index
                      %>
                      
                      <% unless is_single_day_event %>
                        <div class="event-line <%= event.start_date > Date.current || time_unit > Date.current ? 'is-future' : '' %>" 
                             style="background-color: <%= event.color %>; 
                                    left: <%= left_position %>px;
                                    z-index: <%= z_index %>;"></div>
                      <% end %>
                      
                      <% 
                        # Verifica se l'evento termina nell'unità di tempo corrente
                        event_ends_in_time_unit = false
                        case @view_type
                        when 'days'
                          event_ends_in_time_unit = time_unit == event_end
                        when 'weeks'
                          event_ends_in_time_unit = time_unit == event_end.beginning_of_week
                        when 'months'
                          event_ends_in_time_unit = time_unit == event_end.beginning_of_month
                        when 'years'
                          event_ends_in_time_unit = time_unit == event_end.beginning_of_year
                        end
                      %>
                      
                      <% if event_ends_in_time_unit %>
                        <div class="event-title-line <%= event.start_date > Date.current || time_unit > Date.current ? 'is-future' : '' %>" 
                             style="background-color: <%= event.color %>; 
                                    left: <%= is_single_day_event ? 0 : left_position + 5 %>px;
                                    width: calc(100% - <%= is_single_day_event ? 0 : left_position + 5 %>px);
                                    z-index: <%= z_index %>;"></div>
                      <% end %>
                    <% end %>
                  <% end %>
                </div>
                <div class="time-unit-events">
                  <% @ordered_events.each do |event| %>
                    <% event_end = event.end_date || Date.current %>
                    <% 
                      # Verifica se l'evento termina nell'unità di tempo corrente
                      event_ends_in_time_unit = false
                      case @view_type
                      when 'days'
                        event_ends_in_time_unit = time_unit == event_end
                      when 'weeks'
                        event_ends_in_time_unit = time_unit == event_end.beginning_of_week
                      when 'months'
                        event_ends_in_time_unit = time_unit == event_end.beginning_of_month
                      when 'years'
                        event_ends_in_time_unit = time_unit == event_end.beginning_of_year
                      end
                    %>
                    
                    <% if event_ends_in_time_unit %>
                      <div class="event-title <%= event.start_date > Date.current ? 'future' : '' %>">
                        <%= link_to event.name,
                                  edit_timeline_event_path(@timeline, event),
                                  style: "color: #{event.color};",
                                  class: "event-title-link" %>
                        
                        <% if event.start_date %>
                          <span class="event-duration-separator"> — </span>
                          <% duration_content = capture do %>
                            <% if event.event_duration == '1-day' %>
                              <%= l(event.start_date, format: '%d %b') %>
                            <% else %>
                              <% duration_text = DurationFormatter.format_duration(event.duration) %>
                              <% if event.event_type == 'open' %>
                                <%= l(event.start_date, format: '%d %b') %> - ... (<%= duration_text %>)
                              <% else %>
                                <%= l(event.start_date, format: '%d %b') %>-<%= l(event.end_date, format: '%d %b') %> (<%= duration_text %>)
                              <% end %>
                            <% end %>
                            <i class="fas fa-edit ms-1"></i>
                          <% end %>
                          
                          <%= link_to duration_content,
                                    edit_timeline_event_path(@timeline, event),
                                    class: "event-duration" %>
                        <% end %>
                      </div>
                    <% end %>
                  <% end %>
                </div>
              <% end %>
            <% end %>
          <% else %>
            <p><%= t('messages.no_events') %></p>
          <% end %>
        </div>
      </div>
    </div>
  <% else %>
    <div class="row">
      <div class="col-12">
        <p><%= t('messages.no_events') %></p>
      </div>
    </div>
  <% end %>
</div>

<style media="print">
  .fa-edit {
    display: none !important;
  }
</style>
